#VRML V2.0 utf8

WorldInfo {
	title "Lighthouse"
	info ["Filip Bártek", "Eva Pešková"]
}

EXTERNPROTO	LighthouseProto [
	exposedField SFInt32 lod
]
"lighthouse.wrl#Lighthouse"

PROTO Index [
	exposedField SFInt32 lod 1
]{
	Group {
		children [

			NavigationInfo {
				headlight TRUE
				# radius, height, foot length (climb height)
				avatarSize [0.1, 1.6, 0.4]
			}

			Transform {
				children [
					Transform {
						children [
							Viewpoint {
								description	"Far"
								jump FALSE
							}
						]
						# pi / 32 ~ 0.10
						rotation 1 0 0 0.20
						translation	0 0 100
					}
					Transform {
						children [
							Viewpoint {
								description	"Near"
								jump FALSE
							}
						]
						# pi / 3 ~ 1.05
						rotation 1 0 0 1.05
						translation	0 0 10
					}
				]
				rotation 0 1 0 -1.05
			}

			# Night
			Background {
				skyColor [0.0 0.0 0]
				groundColor [0 0.0625 0.125]
			}

			# Moonlight
			DirectionalLight {
				color 1 1 1
				direction 0 -1 0
				intensity 0.25
				ambientIntensity 0.125
			}

			Transform {
				children [
					LighthouseProto	{
						# Central entry point where scene parameters are set
						lod	IS lod
					}

					Transform {
						children [
							Transform {
								children [
									Transform {
										children Viewpoint {
											description	"Test: FPS near left"
											position 0 0 0
											jump FALSE
										}
										translation	-0.5 0 0
									}
									Transform {
										children Viewpoint {
											description	"Test: FPS near right"
											position 0 0 0
											jump FALSE
										}
										translation	0.5 0 0
									}
								]
								translation	0 0 10
							}
							Transform {
								children [
									Transform {
										children Viewpoint {
											description	"Test: FPS far left"
											position 0 0 0
											jump FALSE
										}
										translation	-0.5 0 0
									}
									Transform {
										children Viewpoint {
											description	"Test: FPS far right"
											position 0 0 0
											jump FALSE
										}
										translation	0.5 0 0
									}
								]
								translation	0 0 100
							}
							Transform {
								children [
									Transform {
										children Viewpoint {
											description	"Test: FPS farthest left"
											position 0 0 0
											jump FALSE
										}
										translation	-0.5 0 0
									}
									Transform {
										children Viewpoint {
											description	"Test: FPS farthest right"
											position 0 0 0
											jump FALSE
										}
										translation	0.5 0 0
									}
								]
								translation	0 0 1000
							}
						]
						rotation 0 1 0 -1.05
						# translation = lighthouse height + masonry height + window height * window scale / 2
						# 33.8963803275 = 29.7942 + 1.80975 + 2.03835 * 2.2493 / 2
						translation	0 33.8963803275 0
					}

				]
				# Sea level
				translation	0 -4.7752 0
			}

			DEF	Proxim ProximitySensor {
				size 100 100 100
			}

			# Inspired by: http://dcgi.felk.cvut.cz/cgg/LaskavyPruvodce/kap5/p-5-14.wrl
			DEF	Hud Transform {
				children [
					Transform {
						children [
							Transform {
								children Shape {
									appearance Appearance {
										material Material {
											ambientIntensity 0
											diffuseColor 0 0 0
											emissiveColor 1 1 1
											shininess 0
											specularColor 0 0 0
										}
									}
									geometry DEF HudTimeText Text {
										maxExtent 20
									}
								}
								scale 0.05 0.05 1
								translation	0.25 -0.25 0
							}
						]
						translation	0 0 -1
					}
				]
			}

		]
	}

	# Inspired by: fps.wrl

	DEF	T TimeSensor {
		cycleInterval 1000
	}

	DEF	S Script {
		eventIn	SFTime ukaz
		eventOut MFString hudTimeText
		url	"javascript:
			var time0 = Number.POSITIVE_INFINITY;
			var timeNext = Number.NEGATIVE_INFINITY;
			function ukaz(cas){
				if (cas >= timeNext) {
					if (cas < time0) {
						time0 = cas;
					}
					var timeSeconds = cas - time0;
					var timeSecondsMod = Math.floor(timeSeconds) % 60;
					var timeMinutes = timeSeconds / 60;
					var timeMinutesFloor = Math.floor(timeMinutes);
					var text = timeMinutesFloor + ':' + timeSecondsMod;
					hudTimeText = new MFString(text);
					timeNext = cas + 1;
				}
			}
		"
	}

	ROUTE Proxim.position_changed TO Proxim.center
	ROUTE Proxim.position_changed TO Hud.translation
	ROUTE Proxim.orientation_changed TO	Hud.rotation
	ROUTE Proxim.isActive TO T.loop
	ROUTE T.cycleTime TO S.ukaz
	ROUTE T.time TO	S.ukaz
	ROUTE S.hudTimeText	TO HudTimeText.string
}
